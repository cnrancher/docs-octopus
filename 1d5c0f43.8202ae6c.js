(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{110:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),c=(n(0),n(126)),i={id:"create-dl",title:"Create DeviceLink"},o={id:"devicelink/create-dl",title:"Create DeviceLink",description:"We are going to connect a device via `DeviceLink`. A link consists of 3 parts: `Adaptor`, `Model` and `Device spec`:",source:"@site/docs/devicelink/_index.md",permalink:"/docs/devicelink/create-dl",editUrl:"https://github.com/rancheredge/docs-octopus/edit/master/website/docs/devicelink/_index.md",sidebar:"docs",previous:{title:"Installation",permalink:"/docs/install"},next:{title:"State of DeviceLink",permalink:"/docs/devicelink/state-of-dl"}},l=[{value:"Manage Device",id:"manage-device",children:[]}],p={rightToc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"We are going to connect a device via ",Object(c.b)("inlineCode",{parentName:"p"},"DeviceLink"),". A link consists of 3 parts: ",Object(c.b)("inlineCode",{parentName:"p"},"Adaptor"),", ",Object(c.b)("inlineCode",{parentName:"p"},"Model")," and ",Object(c.b)("inlineCode",{parentName:"p"},"Device spec"),":"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Adaptor")," describes how to access the device, this connection process calls adaptation. In order to connect a device, we should indicate the name of the adaptor, the name of the device-connectable node and the parameters of this connection."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Model")," describes the model of device, it is the ",Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go"}),"TypeMeta")," of the device model CRD."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Device spec")," describes the desired status of device, it is determined by the device model CRD. ")),Object(c.b)("p",null,"We can imagine that there is a device named ",Object(c.b)("inlineCode",{parentName:"p"},"example")," on the ",Object(c.b)("inlineCode",{parentName:"p"},"edge-worker")," node, we can try to connect it in."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: edge.cattle.io/v1alpha1\nkind: DeviceLink\nmetadata:\n  name: example\n  namespace: octopus-test\nspec:\n  adaptor:\n    node: edge-worker\n    name: adaptors.edge.cattle.io/dummy\n    parameters:\n      ip: 192.168.2.47\n  model:\n    apiVersion: "devices.edge.cattle.io/v1alpha1"\n    kind: "DummyDevice"\n  template:\n    metadata:\n      labels:\n        device: example\n    spec:\n      gear: slow\n      "on": true\n\n')),Object(c.b)("p",null,"There are ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"./docs/octopus/state_of_devicelink.md"}),"several states")," of a link, if we found the ",Object(c.b)("strong",{parentName:"p"},"DeviceConnected")," ",Object(c.b)("inlineCode",{parentName:"p"},"PHASE")," is on ",Object(c.b)("strong",{parentName:"p"},"Healthy")," ",Object(c.b)("inlineCode",{parentName:"p"},"STATUS"),", we can query the same name instance of device model CRD, now the device is in our cluster:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"$ kubectl get devicelink example -n octopus-test\nNAME      KIND          NODE          ADAPTOR                         PHASE             STATUS    AGE\nexample   DummyDevice   edge-worker   adaptors.edge.cattle.io/dummy   DeviceConnected   Healthy   17s\n\n$ kubectl get dummydevice example -n octopus-test -w\nNAME      GEAR   SPEED   AGE\nexample   slow   11      20s\nexample   slow   12      22s\nexample   slow   13      25s\n\n")),Object(c.b)("h3",{id:"manage-device"},"Manage Device"),Object(c.b)("p",null,"When we want to stop the device, we can do this as below:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),'$ kubectl patch devicelink example -n octoupus-test --type merge --patch \'{"spec":{"template":{"spec":{"on":false}}}}\'\ndevicelink.edge.cattle.io/example patched\n\n$ kubectl get devicelink example -n octopus-test\nNAME      GEAR   SPEED   AGE\nexample                  1m12s\n\n')))}s.isMDXComponent=!0},126:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},d=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),b=a,u=d["".concat(i,".").concat(b)]||d[b]||m[b]||c;return n?r.a.createElement(u,o({ref:t},p,{components:n})):r.a.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,i=new Array(c);i[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<c;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);