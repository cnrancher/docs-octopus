(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{155:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return O}));var b=a(2),r=a(9),n=(a(0),a(186)),c={id:"modbus",title:"Modbus Adaptor"},i={id:"en/adaptors/modbus",title:"Modbus Adaptor",description:"## Introduction",source:"@site/docs/en/adaptors/modbus.md",permalink:"/docs-octopus/docs/en/adaptors/modbus",editUrl:"https://github.com/cnrancher/docs-octopus/tree/master/docs/en/adaptors/modbus.md",sidebar:"docs",previous:{title:"How it Works",permalink:"/docs-octopus/docs/en/adaptors/adaptor"},next:{title:"OPC-UA Adaptor",permalink:"/docs-octopus/docs/en/adaptors/opc-ua"}},l=[{value:"Introduction",id:"introduction",children:[{value:"Modbus Registers Operation",id:"modbus-registers-operation",children:[]}]},{value:"Registration Information",id:"registration-information",children:[]},{value:"Support Model",id:"support-model",children:[]},{value:"Support Platform",id:"support-platform",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Authority",id:"authority",children:[]},{value:"Example",id:"example",children:[]},{value:"ModbusDevice",id:"modbusdevice",children:[{value:"ModbusDeviceSpec",id:"modbusdevicespec",children:[]},{value:"ModbusDeviceStatus",id:"modbusdevicestatus",children:[]}]}],p={rightToc:l};function O(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(n.b)("wrapper",Object(b.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"introduction"},"Introduction"),Object(n.b)("p",null,Object(n.b)("a",Object(b.a)({parentName:"p"},{href:"https://www.modbustools.com/modbus.html"}),"Modbus")," is a master/slave protocol, the device requesting the information is called the Modbus master and the devices supplying information are Modbus slaves.\nIn a standard Modbus network, there is one master and up to 247 slaves, each with a unique slave address from 1 to 247.\nThe master can also write information to the slaves."),Object(n.b)("p",null,"Modbus adaptor implements the ",Object(n.b)("a",Object(b.a)({parentName:"p"},{href:"#github.com/goburrow/modbus"}),"goburrow/modbus")," to support both TCP and RTU protocols, it acting as the controller(master) node and connects to or manipulating the Modbus worker(slave) devices on the edge side."),Object(n.b)("h3",{id:"modbus-registers-operation"},"Modbus Registers Operation"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Coil Registers"),": readable and writable, 1 bit (off/on)")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Discrete Input Registers"),": readable, 1 bit (off/on)")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Input Registers"),": readable, 16 bits (0 to 65,535), essentially measurements and statuses")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("strong",{parentName:"p"},"Holding Registers"),": readable and writable, 16 bits (0 to 65,535), essentially configuration values"))),Object(n.b)("h2",{id:"registration-information"},"Registration Information"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Versions"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Register Name"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Endpoint Socket"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Available"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"adaptors.edge.cattle.io/modbus")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"modbus.sock")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*")))),Object(n.b)("h2",{id:"support-model"},"Support Model"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Kind"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Group"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Version"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Available"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"ModbusDevice")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"devices.edge.cattle.io")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*")))),Object(n.b)("h2",{id:"support-platform"},"Support Platform"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"OS"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Arch"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"linux")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"amd64"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"linux")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"arm"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"linux")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("inlineCode",{parentName:"td"},"arm64"))))),Object(n.b)("h2",{id:"usage"},"Usage"),Object(n.b)("pre",null,Object(n.b)("code",Object(b.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"$ kubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/modbus/deploy/e2e/all_in_one.yaml\n")),Object(n.b)("h2",{id:"authority"},"Authority"),Object(n.b)("p",null,"Grant permissions to Octopus as below:"),Object(n.b)("pre",null,Object(n.b)("code",Object(b.a)({parentName:"pre"},{className:"language-text"}),"  Resources                                   Non-Resource URLs  Resource Names  Verbs\n  ---------                                   -----------------  --------------  -----\n  modbusdevices.devices.edge.cattle.io         []                 []              [create delete get list patch update watch]\n  modbusdevices.devices.edge.cattle.io/status  []                 []              [get patch update]\n")),Object(n.b)("h2",{id:"example"},"Example"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Specifies a ",Object(n.b)("inlineCode",{parentName:"p"},"ModbusDevice")," device link to connect a serial port thermometer."),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",Object(b.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: edge.cattle.io/v1alpha1\nkind: DeviceLink\nmetadata:\n  name: modbus-rtu\nspec:\n  adaptor:\n    node: edge-worker\n    name: adaptors.edge.cattle.io/modbus\n  model:\n    apiVersion: "devices.edge.cattle.io/v1alpha1"\n    kind: "ModbusDevice"\n  template:\n    metadata:\n      labels:\n        device: modbus-rtu\n    spec:\n      parameters:\n        syncInterval: 10s\n        timeout: 10s\n      protocol:\n        rtu:\n          endpoint: /dev/tty.usbserial-1410\n          workerID: 1\n          parity: "N"\n          stopBits: 2\n          dataBits: 8\n          baudRate: 9600\n      properties:\n        - name: temperature\n          description: data collection of temperature sensor\n          readOnly: true\n          visitor:\n            register: HoldingRegister\n            offset: 0\n            quantity: 1\n            orderOfOperations:\n              - type: Divide\n                value: "10"\n          type: float\n')))),Object(n.b)("p",null,"For more ",Object(n.b)("inlineCode",{parentName:"p"},"ModbusDevice")," device link examples, please refer to the ",Object(n.b)("a",Object(b.a)({parentName:"p"},{href:"https://github.com/cnrancher/octopus/tree/master/adaptors/modbus/deploy/e2e"}),"deploy/e2e")," directory."),Object(n.b)("h2",{id:"modbusdevice"},"ModbusDevice"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"metadata"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"})),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go#L110"}),"metav1.ObjectMeta")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"spec"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Defines the desired state of ",Object(n.b)("inlineCode",{parentName:"td"},"ModbusDevice"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicespec"}),"ModbusDeviceSpec")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"status"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Defines the observed state of ",Object(n.b)("inlineCode",{parentName:"td"},"ModbusDevice"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicestatus"}),"ModbusDeviceStatus")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h3",{id:"modbusdevicespec"},"ModbusDeviceSpec"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"extension"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the extension of device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceextension"}),"ModbusDeviceExtension")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"parameters"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the parameters of device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceparameters"}),"ModbusDeviceParameters")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"protocol"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the protocol for accessing the device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceprotocol"}),"ModbusDeviceProtocol")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"properties"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the properties of device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceproperty"}),"[]ModbusDeviceProperty")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h3",{id:"modbusdevicestatus"},"ModbusDeviceStatus"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"properties"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Reports the properties of device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicestatusproperty"}),"[]ModbusDeviceStatusProperty")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdeviceparameters"},"ModbusDeviceParameters"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"syncInterval"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of interval that synchronized to limb, default to ",Object(n.b)("inlineCode",{parentName:"td"},"15s"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"timeout"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of timeout, default to ",Object(n.b)("inlineCode",{parentName:"td"},"10s"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdeviceprotocol"},"ModbusDeviceProtocol"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"rtu"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the connection protocol as RTU."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceprotocolrtu"}),"ModbusDeviceProtocolRTU")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"tcp"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the connection protocol as TCP."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceprotocoltcp"}),"ModbusDeviceProtocolTCP")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdeviceprotocolrtu"},"ModbusDeviceProtocolRTU"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"endpoint"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),'Specifies the serial port of device, which is in form of "/dev/ttyS0".'),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"workerID"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the worker ID of device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"baudRate"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the baud rate of connection, a measurement of transmission speed, default to ",Object(n.b)("inlineCode",{parentName:"td"},"19200"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"dataBits"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the data bit of connection, selected from ","[5, 6, 7, 8]",", default to ",Object(n.b)("inlineCode",{parentName:"td"},"8"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"parity"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the parity of connection, selected from ","[",Object(n.b)("inlineCode",{parentName:"td"},"N")," - None, ",Object(n.b)("inlineCode",{parentName:"td"},"E")," - Even, ",Object(n.b)("inlineCode",{parentName:"td"},"O")," - Odd]",", the use of N(None) parity requires 2 stop bits, default to ",Object(n.b)("inlineCode",{parentName:"td"},"E"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"stopBits"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the stop bit of connection, selected from ","[1, 2]",",the use of N(None) parity requires 2 stop bits, default to ",Object(n.b)("inlineCode",{parentName:"td"},"1"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdeviceprotocoltcp"},"ModbusDeviceProtocolTCP"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"endpoint"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),'Specifies the IP address of device, which is in form of "ip:port".'),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"workerID"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the worker ID of device."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")))),Object(n.b)("h4",{id:"modbusdeviceproperty"},"ModbusDeviceProperty"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"name"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the name of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"description"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the description of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"type"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the type of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicepropertytype"}),"ModbusDevicePropertyType")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"visitor"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the visitor of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicepropertyvisitor"}),"ModbusDevicePropertyVisitor")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"readOnly"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies if the property is readonly., default to ",Object(n.b)("inlineCode",{parentName:"td"},"false"),"."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"value"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the value of property, only available in the writable property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdevicestatusproperty"},"ModbusDeviceStatusProperty"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"name"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Reports the name of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"type"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Reports the type of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicepropertytype"}),"ModbusDevicePropertyType")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"value"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Reports the value of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"updatedAt"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Reports the updated timestamp of property."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/time.go#L33"}),"metav1.Time")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdevicepropertytype"},"ModbusDevicePropertyType"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Property data type is string."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Property data type is int."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"float"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Property data type is float."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Property data type is boolean."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")))),Object(n.b)("h4",{id:"modbusdevicepropertyvisitor"},"ModbusDevicePropertyVisitor"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"register"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the register to visit."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceregistertype"}),"ModbusDeviceRegisterType")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"offset"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the starting offset of register for read/write data."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"quantity"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the quantity of register."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"int"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"true")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"orderOfOperations"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the operations in order if needed."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicearithmeticoperation"}),"[]ModbusDeviceArithmeticOperation")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdeviceregistertype"},"ModbusDeviceRegisterType"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"CoilRegister"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Readable and writable, 1 bit (off/on)."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"DiscreteInputRegister"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Readonly, 1 bit (off/on)."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"InputRegister"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Readonly, 16 bits (0 to 65,535), essentially measurements and statuses."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"HoldingRegister"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Readable and writable, 16 bits (0 to 65,535), essentially configuration values."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")))),Object(n.b)("h4",{id:"modbusdevicearithmeticoperation"},"ModbusDeviceArithmeticOperation"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"type"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the type of arithmetic operation."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicearithmeticoperationtype"}),"ModbusDeviceArithmeticOperationType")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"value"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the value for arithmetic operation, which is in form of float string."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))),Object(n.b)("h4",{id:"modbusdevicearithmeticoperationtype"},"ModbusDeviceArithmeticOperationType"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Add"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Arithmetic operation of add."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Subtract"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Arithmetic operation of subtract."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Multiply"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Arithmetic operation of multiply."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Divide"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Arithmetic operation of divide."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"string")))),Object(n.b)("h4",{id:"modbusdeviceextension"},"ModbusDeviceExtension"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Description"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(n.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"mqtt"),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"Specifies the MQTT settings."),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"*",Object(n.b)("a",Object(b.a)({parentName:"td"},{href:"./mqtt-extension#specification"}),"v1alpha1.MQTTOptionsSpec")),Object(n.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),"false")))))}O.isMDXComponent=!0},186:function(e,t,a){"use strict";a.d(t,"a",(function(){return j})),a.d(t,"b",(function(){return m}));var b=a(0),r=a.n(b);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);t&&(b=b.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,b)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,b,r=function(e,t){if(null==e)return{};var a,b,r={},n=Object.keys(e);for(b=0;b<n.length;b++)a=n[b],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(b=0;b<n.length;b++)a=n[b],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),O=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},j=function(e){var t=O(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},o=Object(b.forwardRef)((function(e,t){var a=e.components,b=e.mdxType,n=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),j=O(a),o=b,m=j["".concat(c,".").concat(o)]||j[o]||d[o]||n;return a?r.a.createElement(m,i({ref:t},p,{components:a})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,b=t&&t.mdxType;if("string"==typeof e||b){var n=a.length,c=new Array(n);c[0]=o;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:b,c[1]=i;for(var p=2;p<n;p++)c[p]=a[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"}}]);