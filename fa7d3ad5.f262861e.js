(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{145:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),o=(n(0),n(148)),r={id:"develop",title:"Develop Octopus",sidebar_label:"Develop Octopus"},b={id:"en/develop",title:"Develop Octopus",description:"## Build management of Octopus",source:"@site/docs/en/develop.md",permalink:"/docs-octopus/docs/en/develop",editUrl:"https://github.com/cnrancher/docs-octopus/edit/master/website/docs/en/develop.md",sidebar_label:"Develop Octopus",sidebar:"docs",previous:{title:"How to Develop Adaptor",permalink:"/docs-octopus/docs/en/adaptors/develop"},next:{title:"Monitoring Octopus",permalink:"/docs-octopus/docs/en/monitoring"}},l=[{value:"Build management of Octopus",id:"build-management-of-octopus",children:[{value:"Usage cases",id:"usage-cases",children:[]},{value:"Notes",id:"notes",children:[]}]},{value:"Build management of Adaptors",id:"build-management-of-adaptors",children:[]},{value:"Build management for all components",id:"build-management-for-all-components",children:[]},{value:"Contributor workflow",id:"contributor-workflow",children:[]}],c={rightToc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"build-management-of-octopus"},"Build management of Octopus"),Object(o.b)("p",null,"Octopus takes inspiration from ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://maven.apache.org/"}),"Maven")," and provides a set of project build management based on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.gnu.org/software/make/manual/make.html"}),"make"),". Build management process consists of several stages, a stage consists of several actions. For convenience, the name of the action also represents the current stage. The overall flow relationship of action looks as below:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"          generate -> mod -> lint -> build -> package -> deploy\n                                         \\ -> test -> verify -> e2e\n")),Object(o.b)("p",null,"Explanation of each action:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"right"}),"Action"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Usage"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"generate"),", ",Object(o.b)("inlineCode",{parentName:"td"},"gen"),", ",Object(o.b)("inlineCode",{parentName:"td"},"g")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Generate deployment manifests and deepcopy/runtime.Object implementations of ",Object(o.b)("inlineCode",{parentName:"td"},"octopus")," via ",Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"https://github.com/kubernetes-sigs/controller-tools/blob/master/cmd/controller-gen/main.go"}),Object(o.b)("inlineCode",{parentName:"a"},"controller-gen")),"; Generate proto files of ",Object(o.b)("inlineCode",{parentName:"td"},"adaptor")," interfaces via ",Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"https://github.com/protocolbuffers/protobuf"}),Object(o.b)("inlineCode",{parentName:"a"},"protoc")),".")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"mod"),", ",Object(o.b)("inlineCode",{parentName:"td"},"m")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Download ",Object(o.b)("inlineCode",{parentName:"td"},"octopus")," dependencies.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"lint"),", ",Object(o.b)("inlineCode",{parentName:"td"},"l")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Verify ",Object(o.b)("inlineCode",{parentName:"td"},"octopus")," via ",Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"https://github.com/golangci/golangci-lint"}),Object(o.b)("inlineCode",{parentName:"a"},"golangci-lint")),", roll back to ",Object(o.b)("inlineCode",{parentName:"td"},"go fmt")," and ",Object(o.b)("inlineCode",{parentName:"td"},"go vet")," if the installation fails. <br/",Object(o.b)("br",null)," Use ",Object(o.b)("inlineCode",{parentName:"td"},"DIRTY_CHECK=true")," to verify the whole project is in dirty tree or not.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"build"),", ",Object(o.b)("inlineCode",{parentName:"td"},"b")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Compile ",Object(o.b)("inlineCode",{parentName:"td"},"octopus")," according to the type and architecture of the OS, generate the binary into ",Object(o.b)("inlineCode",{parentName:"td"},"bin")," directory. ",Object(o.b)("br",null),Object(o.b)("br",null)," Use ",Object(o.b)("inlineCode",{parentName:"td"},"CROSS=true")," to compile binaries of the supported platforms(search ",Object(o.b)("inlineCode",{parentName:"td"},"constant.sh")," file in this repo).")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"test"),", ",Object(o.b)("inlineCode",{parentName:"td"},"t")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Run unit tests.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"verify"),", ",Object(o.b)("inlineCode",{parentName:"td"},"v")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Run integration tests with a Kubernetes cluster. ",Object(o.b)("br",null),Object(o.b)("br",null)," Use ",Object(o.b)("inlineCode",{parentName:"td"},"CLUSTER_TYPE")," to specify the type for local cluster, default is ",Object(o.b)("inlineCode",{parentName:"td"},"k3d"),". Instead of setting up a local cluster, you can also use environment variable ",Object(o.b)("inlineCode",{parentName:"td"},"USE_EXISTING_CLUSTER=true")," to point out an existing cluster, and then the integration tests will use the kubeconfig of the current environment to communicate with the existing cluster.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"package"),", ",Object(o.b)("inlineCode",{parentName:"td"},"pkg"),", ",Object(o.b)("inlineCode",{parentName:"td"},"p")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Package Docker image.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"e2e"),", ",Object(o.b)("inlineCode",{parentName:"td"},"e")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Run E2E tests.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"right"}),Object(o.b)("inlineCode",{parentName:"td"},"deploy"),", ",Object(o.b)("inlineCode",{parentName:"td"},"dep"),", ",Object(o.b)("inlineCode",{parentName:"td"},"d")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"Push Docker images and create manifest images for the current version. ",Object(o.b)("br",null),Object(o.b)("br",null)," Use ",Object(o.b)("inlineCode",{parentName:"td"},"WITHOUT_MANIFEST=true")," to prevent pushing manifest image, or ",Object(o.b)("inlineCode",{parentName:"td"},"ONLY_MANIFEST=true")," to push the manifest images only and ",Object(o.b)("inlineCode",{parentName:"td"},"IGNORE_MISSING=true")," to warn on missing images defined in platform list if needed.")))),Object(o.b)("p",null,"Executing a stage can run ",Object(o.b)("inlineCode",{parentName:"p"},"make octopus <stage name>"),", for example, when executing the ",Object(o.b)("inlineCode",{parentName:"p"},"test")," stage, please run ",Object(o.b)("inlineCode",{parentName:"p"},"make octopus test"),". To execute a stage will execute all actions in the previous sequence, if running ",Object(o.b)("inlineCode",{parentName:"p"},"make octopus test"),", it actually includes executing ",Object(o.b)("inlineCode",{parentName:"p"},"generate"),", ",Object(o.b)("inlineCode",{parentName:"p"},"mod"),", ",Object(o.b)("inlineCode",{parentName:"p"},"lint"),", ",Object(o.b)("inlineCode",{parentName:"p"},"build")," and ",Object(o.b)("inlineCode",{parentName:"p"},"test")," actions."),Object(o.b)("p",null,"To run an action by adding ",Object(o.b)("inlineCode",{parentName:"p"},"only")," command, for example, if only run ",Object(o.b)("inlineCode",{parentName:"p"},"build")," action, please use ",Object(o.b)("inlineCode",{parentName:"p"},"make octopus build only"),"."),Object(o.b)("p",null,"To combine multiple actions can use a comma list, for example, if want to run ",Object(o.b)("inlineCode",{parentName:"p"},"build"),", ",Object(o.b)("inlineCode",{parentName:"p"},"package")," and ",Object(o.b)("inlineCode",{parentName:"p"},"deploy")," actions orderly, please use ",Object(o.b)("inlineCode",{parentName:"p"},"make octopus build,package,deploy"),"."),Object(o.b)("p",null,"Integrate with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rancher/dapper"}),Object(o.b)("inlineCode",{parentName:"a"},"dapper"))," via ",Object(o.b)("inlineCode",{parentName:"p"},"BY")," environment variable, for example, if only run ",Object(o.b)("inlineCode",{parentName:"p"},"build")," action via ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rancher/dapper"}),Object(o.b)("inlineCode",{parentName:"a"},"dapper")),", please use ",Object(o.b)("inlineCode",{parentName:"p"},"BY=dapper make octopus build only"),". "),Object(o.b)("h3",{id:"usage-cases"},"Usage cases"),Object(o.b)("p",null,"Suppose to try the following example on Mac:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run in the localhost, the current environment will install additional dependencies. You will get a corresponding warning if any installation fails."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make octopus build"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"build")," stage, then get a ",Object(o.b)("inlineCode",{parentName:"li"},"darwin/amd64")," execution binary."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make octopus test only"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"test")," action on ",Object(o.b)("inlineCode",{parentName:"li"},"darwin/amd64")," platform."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"REPO=somebody OS=linux ARCH=amd64 make octopus package"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"package")," stage, then get a ",Object(o.b)("inlineCode",{parentName:"li"},"linux/amd64")," execution binary and an octopus ",Object(o.b)("inlineCode",{parentName:"li"},"linux/amd64")," image of ",Object(o.b)("inlineCode",{parentName:"li"},"somebody")," repo."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CLUSTER_TYPE=kind make octopus verify only"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"verify")," action with ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/kubernetes-sigs/kind"}),Object(o.b)("inlineCode",{parentName:"a"},"kind"))," cluster."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Support multi-arch in the localhost."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CROSS=true make octopus build only"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"build")," action, then get all execution binaries of supported platform."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CROSS=true make octopus test only"),": ",Object(o.b)("em",{parentName:"li"},"crossed testing isn't supported currently"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CROSS=true REPO=somebody make octopus package only"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"package")," action, then get all supported platform images of ",Object(o.b)("inlineCode",{parentName:"li"},"somebody")," repo.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make octopus package only"),": ",Object(o.b)("em",{parentName:"li"},"packaging ",Object(o.b)("inlineCode",{parentName:"em"},"darwin")," platform image isn't supported currently"),"."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CROSS=true REPO=somebody make octopus deploy only"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"deploy")," action, then push all supported platform images to ",Object(o.b)("inlineCode",{parentName:"li"},"somebody")," repo, also create ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.docker.com/engine/reference/commandline/manifest/"}),"manifest images")," for the current version.",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"make octopus deploy only"),": ",Object(o.b)("em",{parentName:"li"},"deploying ",Object(o.b)("inlineCode",{parentName:"em"},"darwin")," platform image isn't supported currently"),"."))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"In ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rancher/dapper"}),Object(o.b)("inlineCode",{parentName:"a"},"dapper"))," mode, no additional dependencies are required in the current environment, which suitable for constructing CI / CD and good to the portability of the environment."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BY=dapper make octopus build"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"build")," stage, then get a ",Object(o.b)("inlineCode",{parentName:"li"},"linux/amd64")," execution binary."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BY=dapper make octopus test"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"test")," stage on ",Object(o.b)("inlineCode",{parentName:"li"},"linux/amd64")," platform."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BY=dapper REPO=somebody make octopus package only"),": execute ",Object(o.b)("inlineCode",{parentName:"li"},"package")," action and get an octopus ",Object(o.b)("inlineCode",{parentName:"li"},"linux/amd64")," image of ",Object(o.b)("inlineCode",{parentName:"li"},"sombody")," repo.")))),Object(o.b)("h3",{id:"notes"},"Notes"),Object(o.b)("p",null,"In ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rancher/dapper"}),Object(o.b)("inlineCode",{parentName:"a"},"dapper"))," mode:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Using ",Object(o.b)("inlineCode",{parentName:"li"},"USE_EXISTING_CLUSTER=true")," is ",Object(o.b)("strong",{parentName:"li"},"NOT ALLOWED"),".")),Object(o.b)("h2",{id:"build-management-of-adaptors"},"Build management of Adaptors"),Object(o.b)("p",null,"The build management of Adaptors is the similar to Octopus, except that the execution is different. Executing a stage of any adaptor can run ",Object(o.b)("inlineCode",{parentName:"p"},"make adaptor <adaptor name> <stage name>"),". Please view ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../adaptors/develop.md"}),"Develop Adaptors")," for more details."),Object(o.b)("h2",{id:"build-management-for-all-components"},"Build management for all components"),Object(o.b)("p",null,"With the increase of components, the operation of building them one by one becomes more cumbersome. Therefore, by specifying a stage or action, the build management performs the same stage or action for all components. For example, running ",Object(o.b)("inlineCode",{parentName:"p"},"make all test")," will execute the ",Object(o.b)("inlineCode",{parentName:"p"},"test")," stage of Octopus and all Adaptors. To execute an action just type with an ",Object(o.b)("inlineCode",{parentName:"p"},"only")," suffix command."),Object(o.b)("h2",{id:"contributor-workflow"},"Contributor workflow"),Object(o.b)("p",null,"Contributing is welcome, please view ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/cnrancher/octopus/blob/master/CONTRIBUTING.md"}),"CONTRIBUTING")," for more details."))}p.isMDXComponent=!0},148:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b({},t,{},e)),n},d=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),s=a,u=d["".concat(r,".").concat(s)]||d[s]||m[s]||o;return n?i.a.createElement(u,b({ref:t},c,{components:n})):i.a.createElement(u,b({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=s;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:a,r[1]=b;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);