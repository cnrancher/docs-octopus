(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{176:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return n})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return p}));var r=a(2),c=a(9),b=(a(0),a(187)),n={id:"dummy",title:"Dummy Adaptor"},l={id:"en/adaptors/dummy",title:"Dummy Adaptor",description:"## Introduction",source:"@site/docs/en/adaptors/dummy.md",permalink:"/docs-octopus/docs/en/adaptors/dummy",editUrl:"https://github.com/cnrancher/docs-octopus/tree/master/docs/en/adaptors/dummy.md",sidebar:"docs",previous:{title:"BLE Adaptor",permalink:"/docs-octopus/docs/en/adaptors/ble"},next:{title:"Integrate with MQTT",permalink:"/docs-octopus/docs/en/adaptors/mqtt-extension"}},i=[{value:"Introduction",id:"introduction",children:[]},{value:"Registration Information",id:"registration-information",children:[]},{value:"Support Model",id:"support-model",children:[]},{value:"Support Platform",id:"support-platform",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Authority",id:"authority",children:[]},{value:"Example",id:"example",children:[]},{value:"DummySpecialDevice",id:"dummyspecialdevice",children:[{value:"DummySpecialDeviceSpec",id:"dummyspecialdevicespec",children:[]},{value:"DummySpecialDeviceStatus",id:"dummyspecialdevicestatus",children:[]},{value:"DummySpecialDeviceGear",id:"dummyspecialdevicegear",children:[]},{value:"DummyProtocolDevice",id:"dummyprotocoldevice",children:[]},{value:"DummyProtocolDeviceSpec",id:"dummyprotocoldevicespec",children:[]},{value:"DummyProtocolDeviceStatus",id:"dummyprotocoldevicestatus",children:[]}]},{value:"Walkthrough",id:"walkthrough",children:[]}],o={rightToc:i};function p(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(b.b)("wrapper",Object(r.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"introduction"},"Introduction"),Object(b.b)("p",null,"Dummy is used to quickly experience Octopus. The Dummy adaptor can simulate the interaction of limb and adaptor."),Object(b.b)("h2",{id:"registration-information"},"Registration Information"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Versions"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Register Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Endpoint Socket"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Available"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"adaptors.edge.cattle.io/dummy")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"dummy.sock")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"*")))),Object(b.b)("h2",{id:"support-model"},"Support Model"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Kind"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Group"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Version"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Available"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyspecialdevice"}),Object(b.b)("inlineCode",{parentName:"a"},"DummySpecialDevice"))),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"devices.edge.cattle.io")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"*")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevice"}),Object(b.b)("inlineCode",{parentName:"a"},"DummyProtocolDevice"))),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"devices.edge.cattle.io")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"*")))),Object(b.b)("h2",{id:"support-platform"},"Support Platform"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"OS"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Arch"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"linux")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"amd64"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"linux")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"arm"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),Object(b.b)("inlineCode",{parentName:"td"},"linux")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"arm64"))))),Object(b.b)("h2",{id:"usage"},"Usage"),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"kubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/dummy/deploy/e2e/all_in_one.yaml\n")),Object(b.b)("h2",{id:"authority"},"Authority"),Object(b.b)("p",null,"Grant permissions to Octopus as below:"),Object(b.b)("pre",null,Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-text"}),"  Resources                                           Non-Resource URLs  Resource Names  Verbs\n  ---------                                           -----------------  --------------  -----\n  dummyprotocoldevices.devices.edge.cattle.io         []                 []              [create delete get list patch update watch]\n  dummyspecialdevices.devices.edge.cattle.io          []                 []              [create delete get list patch update watch]\n  dummyprotocoldevices.devices.edge.cattle.io/status  []                 []              [get patch update]\n  dummyspecialdevices.devices.edge.cattle.io/status   []                 []              [get patch update]\n")),Object(b.b)("h2",{id:"example"},"Example"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"Specifies a ",Object(b.b)("inlineCode",{parentName:"p"},"DummySpecialDevice")," device link to connect a fake fan in living room."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-YAML"}),'apiVersion: edge.cattle.io/v1alpha1\nkind: DeviceLink\nmetadata:\n  name: living-room-fan\nspec:\n  adaptor:\n    node: edge-worker\n    name: adaptors.edge.cattle.io/dummy\n  model:\n    apiVersion: "devices.edge.cattle.io/v1alpha1"\n    kind: "DummySpecialDevice"\n  # uses Secret resources\n  references:\n    - name: "ca"\n      secret:\n        name: "living-room-fan-mqtt-ca"\n    - name: "tls"\n      secret:\n        name: "living-room-fan-mqtt-tls"\n  template:\n    metadata:\n      labels:\n        device: living-room-fan\n    spec:\n      # integrates with MQTT\n      extension:\n        mqtt:\n          client:\n            server: tcps://test.mosquitto.org:8884\n            tlsConfig:\n              caFilePEMRef:\n                name: ca\n                item: ca.crt\n              certFilePEMRef:\n                name: tls\n                item: tls.crt\n              keyFilePEMRef:\n                name: tls\n                item: tls.key\n              serverName: test.mosquitto.org\n              insecureSkipVerify: true\n          message:\n            # uses dynamic topic with namespaced name\n            topic: "cattle.io/octopus/:namespace/:name"\n      protocol:\n        location: "living_room"\n      gear: slow\n      "on": true\n'))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"Specifies a ",Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDevice")," device link to connect the chaos robot of localhost."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-YAML"}),'apiVersion: edge.cattle.io/v1alpha1\nkind: DeviceLink\nmetadata:\n  name: localhost-robot\nspec:\n  adaptor:\n    node: edge-worker\n    name: adaptors.edge.cattle.io/dummy\n  model:\n    apiVersion: "devices.edge.cattle.io/v1alpha1"\n    kind: "DummyProtocolDevice"\n  template:\n    metadata:\n      labels:\n        device: localhost-robot\n    spec:\n      protocol:\n        ip: "127.0.0.1"\n      properties:\n        name:\n          type: string\n          description: "The name (unique identifier) of the robot."\n          readOnly: true\n        gender:\n          type: object\n          description: "The gender of the robot."\n          objectProperties:\n            name:\n              type: string\n              description: "The name of the gender."\n            code:\n              type: int\n              description: "The code of the gender."\n        friends:\n          type: array\n          description: "The name list of the robot\'s friends."\n          arrayProperties:\n            type: string\n            description: "The name of the friend."\n        power:\n          type: float\n          description: "The power of the robot."\n')))),Object(b.b)("p",null,"For more ",Object(b.b)("inlineCode",{parentName:"p"},"Dummy*Device")," device link examples, please refer to the ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/cnrancher/octopus/tree/master/adaptors/dummy/deploy/e2e"}),"deploy/e2e")," directory."),Object(b.b)("h2",{id:"dummyspecialdevice"},"DummySpecialDevice"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"DummySpecialDevice")," can be considered as a fake fan."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"metadata"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"})),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go#L110"}),"metav1.ObjectMeta")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"spec"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Defines the desired state of ",Object(b.b)("inlineCode",{parentName:"td"},"DummySpecialDevice"),"."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyspecialdevicespec"}),"DummySpecialDeviceSpec")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"status"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Defines the observed state of ",Object(b.b)("inlineCode",{parentName:"td"},"DummySpecialDevice"),"."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyspecialdevicestatus"}),"DummySpecialDeviceStatus")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h3",{id:"dummyspecialdevicespec"},"DummySpecialDeviceSpec"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"extension"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the extension of device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummydeviceextension"}),"DummyDeviceExtension")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"protocol"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the protocol for accessing the device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyspecialdeviceprotocol"}),"DummySpecialDeviceProtocol")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"on"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies if turn on the device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"gear"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies how fast the device should be, default to ",Object(b.b)("inlineCode",{parentName:"td"},"slow"),"."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyspecialdevicegear"}),"DummySpecialDeviceGear")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h3",{id:"dummyspecialdevicestatus"},"DummySpecialDeviceStatus"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"gear"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the current gear of device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyspecialdevicegear"}),"DummySpecialDeviceGear")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"rotatingSpeed"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the detail number of speed."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"int32"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"dummyspecialdeviceprotocol"},"DummySpecialDeviceProtocol"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"location"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the location of device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"true")))),Object(b.b)("h3",{id:"dummyspecialdevicegear"},"DummySpecialDeviceGear"),Object(b.b)("p",null,"DummySpecialDeviceGear defines how fast the dummy special device should be."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Schema"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"slow"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Starts from 0 and increases every three seconds until 100."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"middle"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Starts from 100 and increases every two seconds until 200."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"fast"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Starts from 200 and increases every one second until 300."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"string")))),Object(b.b)("h3",{id:"dummyprotocoldevice"},"DummyProtocolDevice"),Object(b.b)("p",null,"The ",Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDevice")," can be considered as a chaos protocol robot, it will change its attribute values every two seconds."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"metadata"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"})),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go#L110"}),"metav1.ObjectMeta")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"spec"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Defines the desired state of ",Object(b.b)("inlineCode",{parentName:"td"},"DummyProtocolDevice"),"."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicespec"}),"DummyProtocolDeviceSpec")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"status"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Defines the observed state of ",Object(b.b)("inlineCode",{parentName:"td"},"DummyProtocolDevice"),"."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicestatus"}),"DummyProtocolDeviceStatus")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")))),Object(b.b)("h3",{id:"dummyprotocoldevicespec"},"DummyProtocolDeviceSpec"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"extension"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the extension of device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummydeviceextension"}),"DummyDeviceExtension")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"protocol"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the protocol for accessing the device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldeviceprotocol"}),"DummyProtocolDeviceProtocol")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"properties"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the properties of device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldeviceproperty"}),"map[string]DummyProtocolDeviceProperty")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")))),Object(b.b)("h3",{id:"dummyprotocoldevicestatus"},"DummyProtocolDeviceStatus"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"extension"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the extension of device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#deviceextensionstatus"}),"DeviceExtensionStatus")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"properties"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the observed value of the desired properties."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicestatusproperty"}),"map[string]DummyProtocolDeviceStatusProperty")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")))),Object(b.b)("h4",{id:"dummyprotocoldeviceprotocol"},"DummyProtocolDeviceProtocol"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"ip"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies where to connect the dummy protocol device."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"true")))),Object(b.b)("h4",{id:"dummyprotocoldeviceproperty"},"DummyProtocolDeviceProperty"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDeviceObjectOrArrayProperty")," is the same as ",Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDeviceProperty"),".\nThe existence of ",Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDeviceObjectOrArrayProperty")," is to combat the object circular reference.")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"type"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Describes the type of property."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicepropertytype"}),"DummyProtocolDevicePropertyType")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"description"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Outlines the property."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"readOnly"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Configures the property is readOnly or not."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"arrayProperties"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Describes item properties of the array type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"*",Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldeviceproperty"}),"DummyProtocolDeviceObjectOrArrayProperty")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"objectProperties"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Describes properties of the object type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldeviceproperty"}),"map[string]DummyProtocolDeviceObjectOrArrayProperty")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")))),Object(b.b)("h4",{id:"dummyprotocoldevicestatusproperty"},"DummyProtocolDeviceStatusProperty"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDeviceStatusObjectOrArrayProperty")," is the same as ",Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDeviceStatusProperty"),".\nThe existence of ",Object(b.b)("inlineCode",{parentName:"p"},"DummyProtocolDeviceStatusObjectOrArrayProperty")," is to combat the object circular reference.")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"type"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the type of property."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicepropertytype"}),"DummyProtocolDevicePropertyType")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"intValue"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the value of int type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"*int"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"stringValue"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the value of string type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"*string"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"floatValue"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the value of float type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"*",Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go"}),"resource.Quantity"),", ",Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"https://github.com/kubernetes-sigs/controller-tools/issues/245#issuecomment-550030238"}),"kubernetes-sigs/controller-tools/issues#245")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"booleanValue"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the value of bool type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"*bool"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"arrayValue"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the value of array type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicestatusproperty"}),"[]DummyProtocolDeviceStatusObjectOrArrayProperty")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"objectValue"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Reports the value of object type."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"#dummyprotocoldevicestatusproperty"}),"map[string]DummyProtocolDeviceStatusObjectOrArrayProperty")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")))),Object(b.b)("h4",{id:"dummyprotocoldevicepropertytype"},"DummyProtocolDevicePropertyType"),Object(b.b)("p",null,"DummyProtocolDevicePropertyType describes the type of property."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Property data type is string."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"int"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Property data type is int."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"float"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Property data type is float."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"boolean"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Property data type is boolean."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"array"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Property data type is array."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"object"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Property data type is object."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"string")))),Object(b.b)("h4",{id:"dummydeviceextension"},"DummyDeviceExtension"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Parameter"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:"left"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"mqtt"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"Specifies the MQTT settings."),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"*",Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"./mqtt-extension#specification"}),"v1alpha1.MQTTOptionsSpec")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:"left"}),"false")))),Object(b.b)("h2",{id:"walkthrough"},"Walkthrough"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},Object(b.b)("p",{parentName:"li"},"Create a ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/cnrancher/octopus/blob/master/adaptors/dummy/deploy/e2e/dl_specialdevice.yaml"}),"DeviceLink")," to connect the DummySpecialDevice, which simulates a fan of living room. "),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"kubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/dummy/deploy/e2e/dl_specialdevice.yaml\n")),Object(b.b)("p",{parentName:"li"},"Synchronize the above-created fan's status to the remote MQTT broker server."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"# create a Generic Secret to store the CA for connecting test.mosquitto.org.\nkubectl create secret generic living-room-fan-mqtt-ca --from-file=ca.crt=./test/integration/physical/testdata/mosquitto.org.crt\n\n# create a TLS Secret to store the TLS/SSL keypair for connecting test.mosquitto.org.\nkubectl create secret tls living-room-fan-mqtt-tls --key ./test/integration/physical/testdata/client-key.pem --cert ./test/integration/physical/testdata/client.crt\n\n# publish status to test.mosquitto.org\nkubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/dummy/deploy/e2e/dl_specialdevice_with_mqtt.yaml\n")),Object(b.b)("p",{parentName:"li"},"Use ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"https://mosquitto.org/man/mosquitto_sub-1.html"}),Object(b.b)("inlineCode",{parentName:"a"},"mosquitto_sub"))," tool to watch the synchronized status."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),'# get mqtt broker server\nkubectl get dl living-room-fan -o jsonpath="{.spec.template.spec.extension.mqtt.client.server}"\n\n# get topic name\nkubectl get dl living-room-fan -o jsonpath="{.spec.template.spec.extension.mqtt.message.topic}"\n\n# use mosquitto_sub\nmosquitto_sub -h {the host of mqtt broker server} -p {the port of mqtt broker server} -t {the topic name}\n# mosquitto_sub -h test.mosquitto.org -p 1883 -t cattle.io/octopus/default/living-room-fan \n'))),Object(b.b)("li",{parentName:"ol"},Object(b.b)("p",{parentName:"li"},"Create a ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"./deploy/e2e/dl_protocoldevice.yaml"}),"DeviceLink")," to connect the DummyProtocolDevice, which simulates an intelligent property-filled robot, it can fill the desired properties randomly in 2 seconds."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"kubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/dummy/deploy/e2e/dl_protocoldevice.yaml\n")),Object(b.b)("p",{parentName:"li"},"Synchronize the above-created robot's answers to the remote MQTT broker server."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"# publish status to test.mosquitto.org\nkubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/dummy/deploy/e2e/dl_protocoldevice_with_mqtt.yaml\n")),Object(b.b)("p",{parentName:"li"},"Use ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"https://mosquitto.org/man/mosquitto_sub-1.html"}),Object(b.b)("inlineCode",{parentName:"a"},"mosquitto_sub"))," tool to watch the synchronized answers."),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),'# get mqtt broker server\nkubectl get dl localhost-robot -o jsonpath="{.spec.template.spec.extension.mqtt.client.server}"\n\n# get topic name\nkubectl get dl localhost-robot -o jsonpath="{.spec.template.spec.extension.mqtt.message.topic}"\n\n# get dl uid\nkubectl get dl localhost-robot -o jsonpath="{.metadata.uid}"\n\n# use mosquitto_sub\nmosquitto_sub -h {the host of mqtt broker server} -p {the port of mqtt broker server} -t {the topic name}\n# mosquitto_sub -h test.mosquitto.org -p 1883 -t cattle.io/octopus/835aea2e-5f80-4d14-88f5-40c4bda41aa3\n')))))}p.isMDXComponent=!0},187:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));var r=a(0),c=a.n(r);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,c=function(e,t){if(null==e)return{};var a,r,c={},b=Object.keys(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(r=0;r<b.length;r++)a=b[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var o=c.a.createContext({}),p=function(e){var t=c.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},m=function(e){var t=p(e.components);return c.a.createElement(o.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},j=Object(r.forwardRef)((function(e,t){var a=e.components,r=e.mdxType,b=e.originalType,n=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),m=p(a),j=r,d=m["".concat(n,".").concat(j)]||m[j]||O[j]||b;return a?c.a.createElement(d,l({ref:t},o,{components:a})):c.a.createElement(d,l({ref:t},o))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var b=a.length,n=new Array(b);n[0]=j;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,n[1]=l;for(var o=2;o<b;o++)n[o]=a[o];return c.a.createElement.apply(null,n)}return c.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);