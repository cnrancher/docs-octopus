(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{152:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),o=n(9),r=(n(0),n(186)),p={id:"develop",title:"How to Develop Adaptor",sidebar_label:"How to Develop Adaptor"},i={id:"en/adaptors/develop",title:"How to Develop Adaptor",description:"## Scaffold",source:"@site/docs/en/adaptors/how-to-develop-adaptor.md",permalink:"/docs-octopus/docs/en/adaptors/develop",editUrl:"https://github.com/cnrancher/docs-octopus/tree/master/docs/en/adaptors/how-to-develop-adaptor.md",sidebar_label:"How to Develop Adaptor",sidebar:"docs",previous:{title:"Integrate with MQTT",permalink:"/docs-octopus/docs/en/adaptors/mqtt-extension"},next:{title:"Develop Octopus",permalink:"/docs-octopus/docs/en/develop"}},c=[{value:"Scaffold",id:"scaffold",children:[]},{value:"Build management",id:"build-management",children:[]},{value:"Contributor workflow",id:"contributor-workflow",children:[]}],l={rightToc:c};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"scaffold"},"Scaffold"),Object(r.b)("p",null,"Octopus provides a simple way to develop a new adaptor, with running ",Object(r.b)("inlineCode",{parentName:"p"},"make template-adaptor"),", get a scaffold under ",Object(r.b)("inlineCode",{parentName:"p"},"adaptors")," directory. The overlay of the scaffold is as below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"tree -d adaptors/<adaptor-name>\n\u251c\u2500\u2500 api                             ---  device model CRD\n\u2502   \u2514\u2500\u2500 v1alpha1                    ------  implement the logic*\n\u251c\u2500\u2500 bin                             ---  output of `go build`\n\u251c\u2500\u2500 cmd                             ---  command entry code\n\u2502   \u2514\u2500\u2500 <adaptor-name>              ------  implement the logic*\n\u251c\u2500\u2500 deploy                          ---  deployment manifest\n\u2502   \u251c\u2500\u2500 e2e                         ------  output of `kubectl kustomize` and demo cases\n\u2502   \u2514\u2500\u2500 manifests                   ------  overlay for kustomize\n\u251c\u2500\u2500 dist                            ---  output of `go test` and versioned deployment manifest\n\u251c\u2500\u2500 hack                            ---  bash scripts for make rules\n\u251c\u2500\u2500 pkg                             ---  core code\n\u2502   \u251c\u2500\u2500 adaptor\n\u2502   \u2514\u2500\u2500 <adaptor-name>              ------  implement the logic*\n\u2514\u2500\u2500 test                            ---  test code\n    \u251c\u2500\u2500 e2e\n    \u2514\u2500\u2500 integration\n")),Object(r.b)("h2",{id:"build-management"},"Build management"),Object(r.b)("p",null,"Adaptor follows the build-management of Octopus, please view ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"./develop"}),"Develop Octopus")," for more details. Same as Octopus, Adaptor's management process consists of several stages with several actions. For convenience, the name of the action represents the current stage. The overall relationship of action flow is described as below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"        generate -> mod -> lint -> build -> package -> deploy\n                                       \\ -> test -> verify -> e2e\n")),Object(r.b)("p",null,"Executing a stage for an Adaptor can run ",Object(r.b)("inlineCode",{parentName:"p"},"make adaptor <adatpor-name> <stage name>"),", for example, when executing the ",Object(r.b)("inlineCode",{parentName:"p"},"test")," stage for ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"./dummy"}),"dummy")," adaptor, please run ",Object(r.b)("inlineCode",{parentName:"p"},"make adaptor dummy test"),". "),Object(r.b)("p",null,"To execute a stage will execute all actions in the previous sequence, if running ",Object(r.b)("inlineCode",{parentName:"p"},"make adaptor dummy test"),", it actually includes executing ",Object(r.b)("inlineCode",{parentName:"p"},"generate"),", ",Object(r.b)("inlineCode",{parentName:"p"},"mod"),", ",Object(r.b)("inlineCode",{parentName:"p"},"lint"),", ",Object(r.b)("inlineCode",{parentName:"p"},"build")," and ",Object(r.b)("inlineCode",{parentName:"p"},"test")," actions."),Object(r.b)("p",null,"To run an action by adding ",Object(r.b)("inlineCode",{parentName:"p"},"only")," command, for example, if only run ",Object(r.b)("inlineCode",{parentName:"p"},"build")," action, please use ",Object(r.b)("inlineCode",{parentName:"p"},"make adaptor <adatpor-name> build only"),"."),Object(r.b)("p",null,"Integrate with ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rancher/dapper"}),Object(r.b)("inlineCode",{parentName:"a"},"dapper"))," via ",Object(r.b)("inlineCode",{parentName:"p"},"BY")," environment variable, for example, if only run ",Object(r.b)("inlineCode",{parentName:"p"},"build")," action via ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rancher/dapper"}),Object(r.b)("inlineCode",{parentName:"a"},"dapper")),", please use ",Object(r.b)("inlineCode",{parentName:"p"},"BY=dapper make adaptor <adatpor-name> build only"),". "),Object(r.b)("h2",{id:"contributor-workflow"},"Contributor workflow"),Object(r.b)("p",null,"Contributing is welcome, please view ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/cnrancher/octopus/blob/master/CONTRIBUTING.md"}),"CONTRIBUTING")," for more details."))}d.isMDXComponent=!0},186:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),d=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},b=function(e){var t=d(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=d(n),u=a,m=b["".concat(p,".").concat(u)]||b[u]||s[u]||r;return n?o.a.createElement(m,i({ref:t},l,{components:n})):o.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var l=2;l<r;l++)p[l]=n[l];return o.a.createElement.apply(null,p)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);