(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{155:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return O}));var b=a(2),n=a(9),r=(a(0),a(186)),c={id:"modbus",title:"Modbus Adaptor"},l={id:"en/adaptors/modbus",title:"Modbus Adaptor",description:"## Introduction",source:"@site/docs/en/adaptors/modbus.md",permalink:"/docs-octopus/docs/en/adaptors/modbus",editUrl:"https://github.com/cnrancher/docs-octopus/tree/master/docs/en/adaptors/modbus.md",sidebar:"docs",previous:{title:"How it Works",permalink:"/docs-octopus/docs/en/adaptors/adaptor"},next:{title:"OPC-UA Adaptor",permalink:"/docs-octopus/docs/en/adaptors/opc-ua"}},i=[{value:"Introduction",id:"introduction",children:[{value:"Modbus Registers Operation",id:"modbus-registers-operation",children:[]}]},{value:"Registration Information",id:"registration-information",children:[]},{value:"Support Model",id:"support-model",children:[]},{value:"Support Platform",id:"support-platform",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Authority",id:"authority",children:[]},{value:"Example",id:"example",children:[]},{value:"ModbusDevice",id:"modbusdevice",children:[{value:"ModbusDeviceSpec",id:"modbusdevicespec",children:[]},{value:"ModbusDeviceStatus",id:"modbusdevicestatus",children:[]}]}],p={rightToc:i};function O(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)("wrapper",Object(b.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,Object(r.b)("a",Object(b.a)({parentName:"p"},{href:"https://www.modbustools.com/modbus.html"}),"Modbus")," is a master/slave protocol, the device requesting the information is called the Modbus master and the devices supplying information are Modbus slaves.\nIn a standard Modbus network, there is one master and up to 247 slaves, each with a unique slave address from 1 to 247.\nThe master can also write information to the slaves."),Object(r.b)("p",null,"Modbus adaptor support both TCP and RTU protocol, it acting as the master node and connects to or manipulating the Modbus slave devices on the edge side."),Object(r.b)("h3",{id:"modbus-registers-operation"},"Modbus Registers Operation"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Coil Registers"),": readable and writable, 1 bit (off/on)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Discrete Input Registers"),": readable, 1 bit (off/on)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Input Registers"),": readable, 16 bits (0 to 65,535), essentially measurements and statuses")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Holding Registers"),": readable and writable, 16 bits (0 to 65,535), essentially configuration values"))),Object(r.b)("h2",{id:"registration-information"},"Registration Information"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Versions"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Register Name"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Endpoint Socket"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Available"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"adaptors.edge.cattle.io/modbus")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"modbus.sock")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),"*")))),Object(r.b)("h2",{id:"support-model"},"Support Model"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Kind"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Group"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Version"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"Available"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"ModbusDevice")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"devices.edge.cattle.io")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"v1alpha1")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),"*")))),Object(r.b)("h2",{id:"support-platform"},"Support Platform"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"center"}),"OS"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:"left"}),"Arch"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"linux")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(r.b)("inlineCode",{parentName:"td"},"amd64"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"linux")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(r.b)("inlineCode",{parentName:"td"},"arm"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"linux")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:"left"}),Object(r.b)("inlineCode",{parentName:"td"},"arm64"))))),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(b.a)({parentName:"pre"},{className:"language-shell",metastring:"script",script:!0}),"$ kubectl apply -f https://raw.githubusercontent.com/cnrancher/octopus/master/adaptors/modbus/deploy/e2e/all_in_one.yaml\n")),Object(r.b)("h2",{id:"authority"},"Authority"),Object(r.b)("p",null,"Grant permissions to Octopus as below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(b.a)({parentName:"pre"},{className:"language-text"}),"  Resources                                   Non-Resource URLs  Resource Names  Verbs\n  ---------                                   -----------------  --------------  -----\n  modbusdevices.devices.edge.cattle.io         []                 []              [create delete get list patch update watch]\n  modbusdevices.devices.edge.cattle.io/status  []                 []              [get patch update]\n")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Specifies a ",Object(r.b)("inlineCode",{parentName:"p"},"ModbusDevice")," device link to connect a serial port thermometer."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(b.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: edge.cattle.io/v1alpha1\nkind: DeviceLink\nmetadata:\n  name: modbus-rtu\nspec:\n  adaptor:\n    node: edge-worker\n    name: adaptors.edge.cattle.io/modbus\n  model:\n    apiVersion: "devices.edge.cattle.io/v1alpha1"\n    kind: "ModbusDevice"\n  template:\n    metadata:\n      labels:\n        device: modbus-rtu\n    spec:\n      parameters:\n        syncInterval: 10s\n        timeout: 10s\n      protocol:\n        rtu:\n          endpoint: /dev/tty.usbserial-1410\n          workerID: 1\n          parity: "N"\n          stopBits: 2\n          dataBits: 8\n          baudRate: 9600\n      properties:\n        - name: temperature\n          description: data collection of temperature sensor\n          readOnly: true\n          visitor:\n            register: HoldingRegister\n            offset: 0\n            quantity: 1\n            orderOfOperations:\n              - type: Divide\n                value: "10"\n          type: float\n')))),Object(r.b)("p",null,"For more ",Object(r.b)("inlineCode",{parentName:"p"},"ModbusDevice")," device link examples, please refer to the ",Object(r.b)("a",Object(b.a)({parentName:"p"},{href:"https://github.com/cnrancher/octopus/tree/master/adaptors/modbus/deploy/e2e"}),"deploy/e2e")," directory."),Object(r.b)("h2",{id:"modbusdevice"},"ModbusDevice"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Schema"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"metadata"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go#L110"}),"metav1.ObjectMeta")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"spec"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Defines the desired state of ",Object(r.b)("inlineCode",{parentName:"td"},"ModbusDevice"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicespec"}),"ModbusDeviceSpec")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"status"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Defines the observed state of ",Object(r.b)("inlineCode",{parentName:"td"},"ModbusDevice"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicestatus"}),"ModbusDeviceStatus")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h3",{id:"modbusdevicespec"},"ModbusDeviceSpec"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"extension"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the extension of device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceextension"}),"ModbusDeviceExtension")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"parameters"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the parameters of device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceparameters"}),"ModbusDeviceParameters")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"protocol"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the protocol for accessing the device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceprotocol"}),"ModbusDeviceProtocol")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"properties"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the properties of device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceproperty"}),"[]ModbusDeviceProperty")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h3",{id:"modbusdevicestatus"},"ModbusDeviceStatus"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"properties"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Reports the properties of device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicestatusproperty"}),"[]ModbusDeviceStatusProperty")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdeviceparameters"},"ModbusDeviceParameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"syncInterval"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the amount of interval that synchronized to limb, default to ",Object(r.b)("inlineCode",{parentName:"td"},"15s"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"timeout"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the amount of timeout, default to ",Object(r.b)("inlineCode",{parentName:"td"},"10s"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdeviceprotocol"},"ModbusDeviceProtocol"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"rtu"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the connection protocol as RTU."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceprotocolrtu"}),"ModbusDeviceProtocolRTU")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"tcp"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the connection protocol as TCP."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceprotocoltcp"}),"ModbusDeviceProtocolTCP")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdeviceprotocolrtu"},"ModbusDeviceProtocolRTU"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"endpoint"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),'Specifies the serial port of device, which is in form of "/dev/ttyS0".'),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"workerID"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the worker ID of device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"baudRate"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the baud rate of connection, a measurement of transmission speed, default to ",Object(r.b)("inlineCode",{parentName:"td"},"19200"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"dataBits"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the data bit of connection, selected from ","[5, 6, 7, 8]",", default to ",Object(r.b)("inlineCode",{parentName:"td"},"8"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"parity"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the parity of connection, selected from ","[",Object(r.b)("inlineCode",{parentName:"td"},"N")," - None, ",Object(r.b)("inlineCode",{parentName:"td"},"E")," - Even, ",Object(r.b)("inlineCode",{parentName:"td"},"O")," - Odd]",", the use of N(None) parity requires 2 stop bits, default to ",Object(r.b)("inlineCode",{parentName:"td"},"E"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"stopBits"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the stop bit of connection, selected from ","[1, 2]",",the use of N(None) parity requires 2 stop bits, default to ",Object(r.b)("inlineCode",{parentName:"td"},"1"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdeviceprotocoltcp"},"ModbusDeviceProtocolTCP"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"endpoint"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),'Specifies the IP address of device, which is in form of "ip:port".'),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"workerID"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the worker ID of device."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")))),Object(r.b)("h4",{id:"modbusdeviceproperty"},"ModbusDeviceProperty"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the name of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"description"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the description of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the type of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicepropertytype"}),"ModbusDevicePropertyType")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"visitor"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the visitor of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicepropertyvisitor"}),"ModbusDevicePropertyVisitor")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"readOnly"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies if the property is readonly., default to ",Object(r.b)("inlineCode",{parentName:"td"},"false"),"."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"boolean"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"value"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the value of property, only available in the writable property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdevicestatusproperty"},"ModbusDeviceStatusProperty"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Reports the name of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Reports the type of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicepropertytype"}),"ModbusDevicePropertyType")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"value"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Reports the value of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"updatedAt"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Reports the updated timestamp of property."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/time.go#L33"}),"metav1.Time")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdevicepropertytype"},"ModbusDevicePropertyType"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Property data type is string."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Property data type is int."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"float"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Property data type is float."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"boolean"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Property data type is boolean."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")))),Object(r.b)("h4",{id:"modbusdevicepropertyvisitor"},"ModbusDevicePropertyVisitor"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"register"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the register to visit."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdeviceregistertype"}),"ModbusDeviceRegisterType")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"offset"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the starting offset of register for read/write data."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"quantity"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the quantity of register."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"int"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"true")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"orderOfOperations"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the operations in order if needed."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicearithmeticoperation"}),"[]ModbusDeviceArithmeticOperation")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdeviceregistertype"},"ModbusDeviceRegisterType"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"CoilRegister"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Readable and writable, 1 bit (off/on)."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"DiscreteInputRegister"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Readonly, 1 bit (off/on)."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"InputRegister"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Readonly, 16 bits (0 to 65,535), essentially measurements and statuses."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"HoldingRegister"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Readable and writable, 16 bits (0 to 65,535), essentially configuration values."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")))),Object(r.b)("h4",{id:"modbusdevicearithmeticoperation"},"ModbusDeviceArithmeticOperation"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the type of arithmetic operation."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"#modbusdevicearithmeticoperationtype"}),"ModbusDeviceArithmeticOperationType")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"value"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the value for arithmetic operation, which is in form of float string."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))),Object(r.b)("h4",{id:"modbusdevicearithmeticoperationtype"},"ModbusDeviceArithmeticOperationType"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Add"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Arithmetic operation of add."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Subtract"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Arithmetic operation of subtract."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Multiply"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Arithmetic operation of multiply."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Divide"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Arithmetic operation of divide."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"string")))),Object(r.b)("h4",{id:"modbusdeviceextension"},"ModbusDeviceExtension"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Parameter"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Description"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Scheme"),Object(r.b)("th",Object(b.a)({parentName:"tr"},{align:null}),"Required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"mqtt"),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"Specifies the MQTT settings."),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"*",Object(r.b)("a",Object(b.a)({parentName:"td"},{href:"./mqtt-extension#specification"}),"v1alpha1.MQTTOptionsSpec")),Object(r.b)("td",Object(b.a)({parentName:"tr"},{align:null}),"false")))))}O.isMDXComponent=!0},186:function(e,t,a){"use strict";a.d(t,"a",(function(){return j})),a.d(t,"b",(function(){return m}));var b=a(0),n=a.n(b);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);t&&(b=b.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,b)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,b,n=function(e,t){if(null==e)return{};var a,b,n={},r=Object.keys(e);for(b=0;b<r.length;b++)a=r[b],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(b=0;b<r.length;b++)a=r[b],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=n.a.createContext({}),O=function(e){var t=n.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},j=function(e){var t=O(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},o=Object(b.forwardRef)((function(e,t){var a=e.components,b=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),j=O(a),o=b,m=j["".concat(c,".").concat(o)]||j[o]||d[o]||r;return a?n.a.createElement(m,l({ref:t},p,{components:a})):n.a.createElement(m,l({ref:t},p))}));function m(e,t){var a=arguments,b=t&&t.mdxType;if("string"==typeof e||b){var r=a.length,c=new Array(r);c[0]=o;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:b,c[1]=l;for(var p=2;p<r;p++)c[p]=a[p];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"}}]);