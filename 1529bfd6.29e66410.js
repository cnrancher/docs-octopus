(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{142:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(2),r=a(9),b=(a(0),a(186)),i={id:"mqtt-extension",title:"\u9002\u914d\u5668\u4e0eMQTT\u96c6\u6210"},c={id:"cn/adaptors/mqtt-extension",title:"\u9002\u914d\u5668\u4e0eMQTT\u96c6\u6210",description:"Octopus\u63d0\u4f9b\u4e86\u4e24\u79cd\u73b0\u6210\u7684\u65b9\u6cd5\u6765\u4e0e[MQTT](http://mqtt.org/)\u96c6\u6210\uff1a",source:"@site/docs/cn/adaptors/mqtt-extension.md",permalink:"/docs-octopus/docs/cn/adaptors/mqtt-extension",editUrl:"https://github.com/cnrancher/docs-octopus/edit/master/website/docs/cn/adaptors/mqtt-extension.md",sidebar:"cn-docs",previous:{title:"Dummy \u9002\u914d\u5668",permalink:"/docs-octopus/docs/cn/adaptors/dummy"},next:{title:"\u5982\u4f55\u5f00\u53d1\u9002\u914d\u5668",permalink:"/docs-octopus/docs/cn/adaptors/develop"}},l=[{value:"MQTT",id:"mqtt",children:[{value:"\u60ef\u4f8b",id:"\u60ef\u4f8b",children:[]}]},{value:"\u914d\u7f6e\u9009\u9879",id:"\u914d\u7f6e\u9009\u9879",children:[{value:"\u89c4\u8303",id:"\u89c4\u8303",children:[]},{value:"Specification YAML",id:"specification-yaml",children:[]},{value:"Status",id:"status",children:[]}]},{value:"\u652f\u6301\u7684\u9002\u914d\u5668",id:"\u652f\u6301\u7684\u9002\u914d\u5668",children:[]}],o={rightToc:l};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"Octopus\u63d0\u4f9b\u4e86\u4e24\u79cd\u73b0\u6210\u7684\u65b9\u6cd5\u6765\u4e0e",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"http://mqtt.org/"}),"MQTT"),"\u96c6\u6210\uff1a"),Object(b.b)("ol",null,Object(b.b)("li",{parentName:"ol"},"\u5927\u591a\u6570Octopus\u9002\u914d\u5668\uff0c\u4f8b\u5982",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./ble"}),"BLE\u9002\u914d\u5668"),"\uff0c\u90fd\u652f\u6301\u901a\u8fc7MQTT\u4ee3\u7406\u540c\u6b65\u8bbe\u5907\u72b6\u6001\u3002 \u5728","[#supported-adaptors]","\u4e0b\u83b7\u5f97\u66f4\u591aMQTT\u6269\u5c55\u9002\u914d\u5668\u3002"),Object(b.b)("li",{parentName:"ol"},"\u5982\u679c\u8bbe\u5907\u81ea\u7136\u652f\u6301MQTT\uff0c\u5219\u53ef\u4ee5\u5c06",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./mqtt"}),"MQTT\u9002\u914d\u5668"),"\u7528\u4f5c\u9996\u9009\u3002")),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u6982\u8ff0\u4e86\u7b2c\u4e00\u79cd\u65b9\u6cd5\u7684\u7ec6\u8282\uff0c\u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8eMQTT\u9002\u914d\u5668\u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"./mqtt"}),"MQTT\u9002\u914d\u5668"),"\u3002 \u5982\u679c\u4ee5\u4e0a\u5f00\u7bb1\u5373\u7528\u7684\u65b9\u5f0f\u65e0\u6cd5\u6ee1\u8db3\u60a8\u7684\u8981\u6c42\uff0c\u5219\u53ef\u4ee5\u6309\u7167",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"../../CONTRIBUTING.md"}),"CONTRIBUTING"),"\u63d0\u51fa\u60a8\u7684\u60f3\u6cd5\uff0c\u6216",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"./develop.md"}),"\u5f00\u53d1\u65b0\u7684\u9002\u914d\u5668"),"\u3002")),Object(b.b)("p",null,"\u5c3d\u7ba1MQTT\u7684\u6700\u65b0\u7248\u672c\u4e3av5.0\uff0c\u4f46\u76ee\u524dOctopus\u6682\u65f6\u4e0d\u652f\u6301\u8be5\u4fee\u8ba2\u7248\uff0c\u4e3b\u8981\u539f\u56e0\u662f",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.eclipse.org/paho/clients/golang/"}),"\u76f8\u5e94\u7684\u5f00\u53d1\u5e93"),"\u5c1a\u4e0d\u652f\u6301",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/eclipse/paho.mqtt.golang/issues/347"}),"paho.mqtt.golang/issues\uff03347"),"\uff1a"),Object(b.b)("ul",{className:"contains-task-list"},Object(b.b)("li",Object(n.a)({parentName:"ul"},{className:"task-list-item"}),Object(b.b)("input",Object(n.a)({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html"}),"MQTT 3.1")),Object(b.b)("li",Object(n.a)({parentName:"ul"},{className:"task-list-item"}),Object(b.b)("input",Object(n.a)({parentName:"li"},{type:"checkbox",checked:!0,disabled:!0}))," ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"}),"MQTT 3.1.1")),Object(b.b)("li",Object(n.a)({parentName:"ul"},{className:"task-list-item"}),Object(b.b)("input",Object(n.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html"}),"MQTT 5.0"))),Object(b.b)("p",null,"\u4e0eMQTT\u96c6\u6210\u4ee5\u663e\u793a\u8bbe\u5907\u72b6\u6001\uff0c\u9664\u4e86\u8d4b\u4e88\u8bbe\u5907\u4f7f\u7528MQTT\u7684\u80fd\u529b\u5916\uff0c\u8fd8\u53ef\u4ee5\u6269\u5c55\u8bbe\u5907\u7684\u4f7f\u7528\u573a\u666f\uff0c\u4f8b\u5982\u8bbe\u5907\u4ea4\u4e92\u548c\u8bbe\u5907\u76d1\u89c6\u3002"),Object(b.b)("h2",{id:"mqtt"},"MQTT"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"MQTT\u662f\u673a\u5668\u5bf9\u673a\u5668(M2M)/",Object(b.b)("inlineCode",{parentName:"p"},"\u7269\u8054\u7f51"),"\u8fde\u63a5\u534f\u8bae\u3002 \u5b83\u88ab\u8bbe\u8ba1\u4e3a\u4e00\u79cd\u975e\u5e38\u8f7b\u91cf\u7ea7\u7684\u53d1\u5e03/\u8ba2\u9605\u6d88\u606f\u4f20\u9012\u3002 \u5bf9\u4e8e\u4e0e\u9700\u8981\u8f83\u5c0f\u4ee3\u7801\u5360\u7528\u548c/\u6216\u7f51\u7edc\u5e26\u5bbd\u975e\u5e38\u5b9d\u8d35\u7684\u8fdc\u7a0b\u4f4d\u7f6e\u7684\u8fde\u63a5\u5f88\u6709\u7528\u3002")),Object(b.b)("p",null,"\u5c3d\u7ba1MQTT\u7684\u540d\u79f0\u5305\u542b",Object(b.b)("inlineCode",{parentName:"p"},"MQ"),"\uff0c\u4f46\u5b83\u4e0d\u662f\u7528\u4e8e\u5b9a\u4e49\u6d88\u606f\u961f\u5217\u7684\u534f\u8bae\uff0c\u5b9e\u9645\u4e0a\uff0c",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.hivemq.com/blog/mqtt-essentials-part2-publish-subscribe/#distinction-from-message-queues"}),Object(b.b)("inlineCode",{parentName:"a"},"MQ"),"\u662f\u6307IBM\u7684MQseries\u4ea7\u54c1\uff0c\u4e0e",Object(b.b)("inlineCode",{parentName:"a"},"\u6d88\u606f\u961f\u5217"),"\u65e0\u5173\u3002"),"\u3002\nMQTT\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u4e8c\u8fdb\u5236\u534f\u8bae\uff0c\u5e76\u4e14\u7531\u4e8e\u5176\u6700\u5c0f\u7684\u6570\u636e\u5305\u5f00\u9500\uff0c\u4e0eHTTP\u4e4b\u7c7b\u7684\u534f\u8bae\u76f8\u6bd4\uff0cMQTT\u5728\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u65f6\u8868\u73b0\u51fa\u8272\u3002 MQTT\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u4ee5\u50cf\u6d88\u606f\u961f\u5217\u4e00\u6837\u53d1\u5e03/\u8ba2\u9605\u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u540c\u65f6\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a\u529f\u80fd\u6765\u4e30\u5bcc\u901a\u4fe1\u573a\u666f\uff0c\u4f8b\u5982QoS\uff0c\u6700\u540e\u9057\u5631\u548c\u9057\u5631\uff0c\u4fdd\u7559\u7684\u6d88\u606f\u7b49\u3002\n\u8981\u4e86\u89e3\u6709\u5173MQTT\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5f3a\u70c8\u63a8\u8350\u4e00\u7cfb\u5217\u6587\u7ae0\uff1a",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.hivemq.com/mqtt-essentials/"}),"MQTT Essentials"),"\u3002"),Object(b.b)("p",null,Object(b.b)("img",Object(n.a)({parentName:"p"},{src:"https://www.hivemq.com/img/blog/mqtt-tcp-ip-stack.png",alt:"mqtt-tcp-ip-stack"}))),Object(b.b)("h3",{id:"\u60ef\u4f8b"},"\u60ef\u4f8b"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},Object(b.b)("strong",{parentName:"p"},"MQTT\u4f7f\u7528\u57fa\u4e8e\u4e3b\u9898\u7684\u6d88\u606f\u8fc7\u6ee4"),"\u3002 ",Object(b.b)("strong",{parentName:"p"},"\u6bcf\u5c01\u90ae\u4ef6\u90fd\u5305\u542b\u4e00\u4e2a\u4e3b\u9898(\u4e3b\u9898)"),"\uff0c\u4ee3\u7406\u53ef\u4ee5\u4f7f\u7528\u8be5\u4e3b\u9898\u6765\u786e\u5b9a\u8ba2\u9605\u5ba2\u6237\u7aef\u662f\u5426\u6536\u5230\u8be5\u90ae\u4ef6\u3002")),Object(b.b)("p",null,"\u5728MQTT\u4e2d\uff0c",Object(b.b)("strong",{parentName:"p"},"topic"),"\u662f\u53ef\u7528\u4e8e",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices/"}),"\u8fc7\u6ee4\u548c\u8def\u7531\u6d88\u606f"),"\u7684\u5c42\u6b21\u7ed3\u6784\u5b57\u7b26\u4e32\uff0c \u800c",Object(b.b)("strong",{parentName:"p"},"payload"),"\u6570\u636e\u4e0d\u53ef\u77e5\uff0c\u8fd9\u610f\u5473\u7740\u53d1\u5e03\u8005\u53ef\u4ee5\u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6587\u672c\u6570\u636e\u751a\u81f3\u662f \u5b8c\u6574\u7684XML\u6216JSON\uff0c\u56e0\u6b64\u8bbe\u8ba1\u4e3b\u9898\u6811\u548c\u6709\u6548\u8d1f\u8f7d\u67b6\u6784\u662f\u4efb\u4f55MQTT\u90e8\u7f72\u7684\u91cd\u8981\u5de5\u4f5c\u3002"),Object(b.b)("p",null,"Octopus\u9075\u5faa",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices/#best-practices"}),"MQTT Essentials\u4e2dMQTT\u4e3b\u9898\u7684\u6700\u4f73\u5b9e\u8df5"),"\u6765\u6784\u9020 ",Object(b.b)("strong",{parentName:"p"},"topic"),"\u540d\u79f0\uff0c\u5e76\u5c06 ",Object(b.b)("strong",{parentName:"p"},"payload")," \u6570\u636e\u7f16\u7ec4\u4e3aJSON\u3002"),Object(b.b)("h2",{id:"\u914d\u7f6e\u9009\u9879"},"\u914d\u7f6e\u9009\u9879"),Object(b.b)("p",null,"Octopus\u91cd\u65b0\u7ec4\u7ec7\u4e86",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/eclipse/paho.mqtt.golang/blob/4c98a2381d16c21ed2f9f131cec2429b0348ab0f/options.go#L53-L87"}),"github.com/eclipse/paho.mqtt.golang"),"\u7684\u5ba2\u6237\u7aef\u53c2\u6570 \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u914d\u7f6e\u9009\u9879\u3002 \u914d\u7f6e\u9009\u9879\u7684\u53ef\u7528\u7248\u672c\u4e3a",Object(b.b)("inlineCode",{parentName:"p"},"v1alpha1"),"\u3002"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Versions"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Available"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Current"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"./integrate_with_mqtt.md"}),Object(b.b)("inlineCode",{parentName:"a"},"v1alpha1"))),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"*"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"*")))),Object(b.b)("p",null,"\u5f53\u524d\u7684\u5b98\u65b9\u9002\u914d\u5668\uff08\u5982BLE\uff0cModbus\u548cOPC-UA\uff09\u4f7f\u7528\u76f8\u540c\u7684\u914d\u7f6e\uff08\u8bf7\u53c2\u9605\u4ee5\u4e0b",Object(b.b)("inlineCode",{parentName:"p"},"spec.template.spec.extension"),"\uff09\u652f\u6301MQTT\u534f\u8bae\u6269\u5c55\u3002"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-YAML"}),'apiVersion: edge.cattle.io/v1alpha1\nkind: DeviceLink\nmetadata:\n name: living-room-fan\nspec:\n adaptor:\n   node: edge-worker\n   name: adaptors.edge.cattle.io/dummy\n model:\n   apiVersion: "devices.edge.cattle.io/v1alpha1"\n   kind: "DummySpecialDevice"\n template:\n   metadata:\n     labels:\n       device: living-room-fan\n   spec:\n     extension:\n       mqtt:\n         client:\n           server: tcp://test.mosquitto.org:1883\n           maxReconnectInterval: 20s\n         message:\n           topic:\n             prefix: cattle.io/octopus\n           qos: 1\n     protocol:\n       location: "living_room"\n     gear: slow\n     "on": true\n')),Object(b.b)("h3",{id:"\u89c4\u8303"},"\u89c4\u8303"),Object(b.b)("p",null,"MQTT\u9009\u9879\u7684\u89c4\u8303\u5728\u6240\u6709MQTT\u6269\u5c55\u9002\u914d\u5668\u4e2d\u5747\u6709\u6548\uff0c\u5b83\u4eec\u7528\u4e8e\u8fde\u63a5MQTT\u4ee3\u7406\uff0c\u6307\u5bfc\u8fde\u63a5\uff0c\u6307\u793a\u8981\u53d1\u5e03/\u8ba2\u9605\u7684\u4e3b\u9898\u4ee5\u53ca\u6709\u6548\u8f7dpayload\u7684\u7f16\u7801\u3002"),Object(b.b)("h4",{id:"deviceextensionspec"},"DeviceExtensionSpec"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mqtt"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the MQTT settings."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttoptionsspec"}),"MQTTOptionsSpec")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"mqttoptionsspec"},"MQTTOptionsSpec"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"client"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the client settings."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttclientoptions"}),"MQTTClientOptions")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"message"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the message settings."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttmessageoptions"}),"MQTTMessageOptions")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")))),Object(b.b)("h4",{id:"mqttclientoptions"},"MQTTClientOptions"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"server"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the server URI of MQTT broker, the format should be ",Object(b.b)("inlineCode",{parentName:"td"},"schema://host:port"),". The ",Object(b.b)("inlineCode",{parentName:"td"},"schema"),' is one of the "ws", "wss", "tcp", "unix", "ssl", "tls" or "tcps".'),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"protocolVersion"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the MQTT protocol version that the cluster uses to connect to broker. Legitimate values are 3 - MQTT 3.1 and 4 - MQTT 3.1.1"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"uint"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"will"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the last will message that the client gives it to the broker."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttclientwillmessage"}),"MQTTClientWillMessage")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"basicAuth"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the username and password that the client connects to the MQTT broker."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttclientbasicauth"}),"MQTTClientBasicAuth")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"tlsConfig"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the TLS configuration that the client connects to the MQTT broker."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttclienttls"}),"MQTTClientTLS")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"cleanSession"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),'Specifies setting the "clean session" flag in the connect message that the MQTT broker should not, default to ',Object(b.b)("inlineCode",{parentName:"td"},"true"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"store"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies to provide message persistence in cases where QoS level is 1 or 2, the default store is ",Object(b.b)("inlineCode",{parentName:"td"},"memory"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttclientstore"}),"MQTTClientStore")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"resumeSubs"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies to enable resuming of stored (un)subscribe messages when connecting but not reconnecting. This is only valid if ",Object(b.b)("inlineCode",{parentName:"td"},"CleanSession")," is false. The default value is ",Object(b.b)("inlineCode",{parentName:"td"},"false"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"connectTimeout"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of time that the client try to open a connection to an MQTT broker before timing out and getting error. A duration of 0 never times out. The default value is ",Object(b.b)("inlineCode",{parentName:"td"},"30s"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"keepAlive"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of time that the client should wait before sending a PING request to the broker. The default keep alive is ",Object(b.b)("inlineCode",{parentName:"td"},"10s"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"pingTimeout"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of time that the client should wait after sending a PING request to the brokerThe default value is ",Object(b.b)("inlineCode",{parentName:"td"},"10s"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"order"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),'Specifies the message routing to guarantee order within each QoS level. The default value is  "true".'),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"writeTimeout"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of time that the client publish a message successfully before getting a timeout error, default to ",Object(b.b)("inlineCode",{parentName:"td"},"30s"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"autoReconnect"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Configures using the automatic reconnection logic, default to ",Object(b.b)("inlineCode",{parentName:"td"},"true"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"maxReconnectInterval"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of time that the client should wait before reconnecting to the broker, default to ",Object(b.b)("inlineCode",{parentName:"td"},"10m"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"messageChannelDepth"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the size of the internal queue that holds messages while the client is temporarily offline, default to ",Object(b.b)("inlineCode",{parentName:"td"},"100"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"uint"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"httpHeaders"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the additional HTTP headers that the client sends in the WebSocket opening handshake."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"map","[string][]","string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"mqttclientwillmessage"},"MQTTClientWillMessage"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"topic"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),'Specifies the topic for publishing the last will message. if not set, the will topic will append "$will" to the topic name specified in global settings as its topic name.'),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"payloadEncode"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Defines the encoded method of publishing message, options are ",Object(b.b)("inlineCode",{parentName:"td"},"raw")," and ",Object(b.b)("inlineCode",{parentName:"td"},"base64"),", default to raw."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"payloadContent"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the payload content."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"qos"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the QoS of the message, default value is ",Object(b.b)("inlineCode",{parentName:"td"},"0"),". options are 0, 1, 2."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"byte"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"retained"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the message to be retained,  default value is ",Object(b.b)("inlineCode",{parentName:"td"},"false"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"mqttclientbasicauth"},"MQTTClientBasicAuth"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"name"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"MQTT server basic auth username."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"password"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"MQTT broker basic auth password."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"mqttclienttls"},"MQTTClientTLS"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"caFilePem"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The PEM format content of the CA certificate, which is used for validate the server certificate with."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"caFilePemRef"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the relationship of DeviceLink's references to refer to the value as the CA file PEM content ."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#devicelinkreferencerelationship"}),"DeviceLinkReferenceRelationship")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"certFilePem"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The PEM format content of the certificate, which is used for client authenticate to the server."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"certFilePemRef"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the relationship of DeviceLink's references to refer to the value as the client certificate file PEM content ."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#devicelinkreferencerelationship"}),"DeviceLinkReferenceRelationship")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"keyFilePem"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The PEM format content of the key, which is used for client authenticate to the server."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"keyFilePemRef"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the relationship of DeviceLink's references to refer to the value as the client key file PEM content."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#devicelinkreferencerelationship"}),"DeviceLinkReferenceRelationship")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"serverName"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Indicates the name of the server, ref to ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"http://tools.ietf.org/html/rfc4366#section-3.1"}),"http://tools.ietf.org/html/rfc4366#section-3.1")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"insecureSkipVerify"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Doesn't validate the server certificate, default value is ",Object(b.b)("inlineCode",{parentName:"td"},"false"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"devicelinkreferencerelationship"},"DeviceLinkReferenceRelationship"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"name"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the k8s resource name of the reference(currently only support k8s secret and configmap within the same namespace)."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"item"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the item name of the referred reference."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")))),Object(b.b)("h4",{id:"mqttclientstore"},"MQTTClientStore"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the type of storage. Options are ",Object(b.b)("inlineCode",{parentName:"td"},"memory")," and ",Object(b.b)("inlineCode",{parentName:"td"},"file"),", the default value is ",Object(b.b)("inlineCode",{parentName:"td"},"memory"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"direcotryPrefix"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the directory prefix of the storage, if using file store. The default value is ",Object(b.b)("inlineCode",{parentName:"td"},"/var/run/octopus/mqtt"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"mqttmessageoptions"},"MQTTMessageOptions"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"topic"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the topic settings."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#mqttmessagetopic"}),"MQTTMessageTopic")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"payloadEncode"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Defines the encoded method of publishing message, options are ",Object(b.b)("inlineCode",{parentName:"td"},"raw")," and ",Object(b.b)("inlineCode",{parentName:"td"},"base64"),", default to raw."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"qos"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the QoS of the message, default value is ",Object(b.b)("inlineCode",{parentName:"td"},"0"),". options are 0, 1, 2."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"byte"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"retained"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the message to be retained,  default value is ",Object(b.b)("inlineCode",{parentName:"td"},"false"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"waitTimeout"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the amount of time that the client should wait after operating, default value to ",Object(b.b)("inlineCode",{parentName:"td"},"0s")," - never times out."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h4",{id:"mqttmessagetopic"},"MQTTMessageTopic"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Schema"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Required"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"name"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the static name of topic - (default to use this static name if both ",Object(b.b)("inlineCode",{parentName:"td"},"name")," and ",Object(b.b)("inlineCode",{parentName:"td"},"prefix")," are configured)."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"prefix"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the prefix for the dynamic name of topic. The prefix is required for dynamic name."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"with"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Specifies the mode for the dynamic name of topic. Options are ",Object(b.b)("inlineCode",{parentName:"td"},"nn"),"(k8s name+namespace) and ",Object(b.b)("inlineCode",{parentName:"td"},"uid"),"(k8s resource uid), the default mode is ",Object(b.b)("inlineCode",{parentName:"td"},"nn"),"."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"string"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"false")))),Object(b.b)("h3",{id:"specification-yaml"},"Specification YAML"),Object(b.b)("p",null,"MQTT\u9009\u9879\u7684\u89c4\u8303\u5728\u6240\u6709MQTT\u6269\u5c55\u9002\u914d\u5668\u4e2d\u5747\u6709\u6548\uff0c\u5b83\u4eec\u7528\u4e8e\u8fde\u63a5MQTT\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u5f15\u5bfc\u8fde\u63a5\uff0c\u6307\u793a\u8981\u53d1\u5e03/\u8ba2\u9605\u7684\u4e3b\u9898\u4ee5\u53ca\u6709\u6548Payload\u7684\u7f16\u7801\u7b49\u3002"),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"REQUIRED\u662f\u5fc5\u586b\u5b57\u6bb5\u3002")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'\n# Specifies the client settings.\nclient:\n\n  # Specifies the server URI of MQTT broker, the format should be `schema://host:port`.\n  # The "schema" is one of the "ws", "wss", "tcp", "unix", "ssl", "tls" or "tcps".\n  # REQUIRED\n  server: <string>\n  \n  # Specifies the MQTT protocol version that the cluster uses to connect to broker.\n  # Legitimate values are currently 3 - MQTT 3.1 or 4 - MQTT 3.1.1.\n  protocolVersion: <int, 3|4>\n  \n  # Specifies the will message that the client gives it to the broker,\n  # which can be published to any clients that are subscribed the provided topic.\n  will:\n  \n    # Specifies the topic for publishing the will message,\n    # if not set, the will topic will append "$will" to the topic name specified\n    # in global settings as its topic name.\n    topic: \n      \n      # Specifies the static name of topic.\n      name: <string>\n  \n    # Specifies the encode way of payload content.\n    #   raw: Not encode.\n    #   base64: The output (published) data is encoded with Base64, and the input (subscribed) data is decoded with Base64. \n    # The "base64" way allows to input bytes (`payloadContent`) that cannot be characterized.\n    # The default way is "raw".\n    payloadEncode: <string, raw|base64>\n\n    # Specifies the payload content.\n    # REQUIRED\n    payloadContent: <string>\n  \n    # Specifies the QoS of the will message.\n    #   0: Send at most once.\n    #   1: Send at least once.\n    #   2: Send exactly once.\n    # The default value is "0".\n    qos: <int, 0|1|2>\n  \n    # Specifies the will message to be retained.\n    # The default value is "false".\n    retained: <bool>\n  \n  # Specifies the username and password that the client connects\n  # to the MQTT broker. Without the use of `tlsConfig`,\n  # the account information will be sent in plaintext across the wire.\n  basicAuth:\n    name: <string>\n    passsword: <string>\n  \n  # Specifies the TLS configuration that the client connects to the MQTT broker.\n  tlsConfig:\n    \n    # The PEM format content of the CA certificate,\n    # which is used for validate the server certificate with.\n    caFilePem: <string>\n    \n    # The PEM format content of the certificate and key,\n    # which is used for client authenticate to the server.\n    certFilePem: <string>\n    keyFilePem: <string>\n    \n    # Indicates the name of the server, ref to http://tools.ietf.org/html/rfc4366#section-3.1.\n    serverName: <string>\n  \n    # Doesn\'t validate the server certificate.\n    insecureSkipVerify: <bool>\n\n  # Specifies setting the "clean session" flag in the connect message that the MQTT broker should not\n  # save it. Any messages that were going to be sent by this client before disconnecting previously but didn\'t send upon connecting to the broker.\n  # The default value is "true".\n  cleanSession: <bool>\n  \n  # Specifies to provide message persistence in cases where QoS level is 1 or 2.\n  # The default store is "memory".\n  store: \n    \n    # Specifies the type of storage.\n    # The default store is "memory".\n    type: <string, memory|file>\n    \n    # Specifies the directory prefix of the storage, if using file store.\n    # The default value is "/var/run/octopus/mqtt".\n    direcotryPrefix: <string>\n\n  # Specifies to enable resuming of stored (un)subscribe messages when connecting but not reconnecting.\n  # This is only valid if `cleanSession` is false.\n  # The default value is "false".\n  resumeSubs: <bool>\n\n  # Specifies the amount of time that the client try to open a connection\n  # to an MQTT broker before timing out and getting error.\n  # A duration of 0 never times out.\n  # The default value is "30s".\n  connectionTime: <string>\n\n  # Specifies the amount of time that the client should wait\n  # before sending a PING request to the broker. This will\n  # allow the client to know that the connection has not been lost\n  # with the server.\n  # A duration of 0 never keeps alive.\n  # The default keep alive is "30s".\n  keepAlive: <string>\n\n  # Specifies the amount of time that the client should wait\n  # after sending a PING request to the broker. This will\n  # allow the client to know that the connection has been lost\n  # with the server.\n  # A duration of 0 may cause unnecessary timeout error.\n  # The default value is "10s".\n  pingTimeout: <string>\n  \n  # Specifies the message routing to guarantee order within each QoS level. If set to false,\n  # the message can be delivered asynchronously from the client to the application and\n  # possibly arrive out of order.\n  # The default value is "true".\n  order: <bool>\n  \n  # Specifies the amount of time that the client publish a message successfully before\n  # getting a timeout error.\n  # A duration of 0 never times out.\n  # The default value is "30s".\n  writeTimeout: <string>\n  \n  # Configures using the automatic reconnection logic.\n  # The default value is "true".\n  autoReconnect: <bool>\n  \n  # Specifies the amount of time that the client should wait\n  # before reconnecting to the broker. The first reconnect interval is 1 second,\n  # and then the interval is incremented by *2 until `MaxReconnectInterval` is reached.\n  # This is only valid if `AutoReconnect` is true.\n  # A duration of 0 may trigger the reconnection immediately.\n  # The default value is "10m".\n  maxReconnectInterval: <string>\n\n  # Specifies the size of the internal queue that holds messages\n  # while the client is temporarily offline, allowing the application to publish\n  # when the client is reconnected.\n  # This is only valid if `autoReconnect` is true.\n  # The default value is "100".\n  messageChannelDepth: <int>\n  \n  # Specifies the additional HTTP headers that the client sends in the WebSocket opening handshake.\n  httpHeaders: <map[string][]string>\n\n# Specifies the message settings.\nmessage:\n    \n  # Specifies the topic settings.\n  # REQUIRED\n  topic:\n      \n    # Specifies the static name of topic.\n    name: <string>\n      \n    # Specifies the prefix for the dynamic name of topic.\n    # The prefix is REQUIRED for dynamic name.\n    prefix: <string>\n      \n    # Specifies the mode for the dynamic name of topic.\n    # The default mode is "nn".\n    with: <string, nn|uid>\n\n  # Specifies the encode way of payload data.\n  #   raw: Not encode.\n  #   base64: The output (published) data is encoded with Base64, and the input (subscribed) data is decoded with Base64.\n  # The default way is "raw".\n  payloadEncode: <string, raw|base64>\n\n  # Specifies the QoS of the will message.\n  #   0: Send at most once.\n  #   1: Send at least once.\n  #   2: Send exactly once.\n  # The default value is "0".\n  qos: <int, 0|1|2>\n\n  # Specifies the will message to be retained.\n  # The default value is "false".\n  retained: <bool>\n\n  # Specifies the amount of time that the client should wait after operating.\n  # A duration of 0 never times out.\n  # The default value is "0s".\n  waitTimeout: <string>\n\n')),Object(b.b)("h3",{id:"status"},"Status"),Object(b.b)("p",null,"The status of MQTT options are also valid in all MQTT extension adaptors, they are describing the observed status of the MQTT configuration."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),'\n# Observes the client settings.\nclient:\n\n  # Observes the broker server URI.\n  server: <string>\n  \n  # Observes the protocol version.\n  protocolVersion: <int>\n\n  # Observes the will message that the client gives it to the broker.\n  will:\n\n    # Observes the topic for publishing the will message.\n    topicName: <string>\n    \n    # Observes the encode way of payload content.\n    payloadEncode: <string>\n\n    # Observes the QoS of the will message.\n    qos: <int>\n\n    # Observes if retaining the will message.\n    retained: <bool>\n\n  # Observes if configuring basic authentication.\n  configBasicAuth: <bool>\n\n  # Observes if configuring TLS.\n  configTLS: <bool>\n  \n  # Observes if setting the "clean session" flag.\n  cleanSession: <bool>\n\n  # Observes the store type.\n  store:\n\n     # Observes the type of storage.\n     type: <string>\n     \n     # Observes the directory of the file storage.\n     directory: <string>\n  \n  # Observes if enabling resuming of stored (un)subscribe messages when connecting but not reconnecting.\n  resumeSubs: <bool>\n\n  # Observes the amount of time that the client try to open a connection\n  # to an MQTT broker before timing out and getting error.\n  connectTimeout: <string>\n\n  # Observes the amount of time that the client should wait\n  # before sending a PING request to the broker.\n  keepAlive: <string>\n  \n  # Observes the amount of time that the client should wait\n  # after sending a PING request to the broker.\n  pingTimeout: <string>\n  \n  # Observes the message routing to guarantee order within each QoS level.\n  order: <bool>\n\n  # Observes the amount of time that the client publish a message successfully before getting a timeout error.\n  writeTimeout: <string>\n  \n  # Observes if using the automatic reconnection logic.\n  autoReconnect: <bool>\n  \n  # Observes the amount of time that the client should wait before reconnecting to the broker.\n  maxReconnectInterval: <int>\n\n  # Observes the size of the internal queue that holds messages while the client is temporarily offline, \n  # allowing the application to publish when the client is reconnected.\n  messageChannelDepth: <int>\n  \n  # Observes the additional HTTP headers that the client sends in the WebSocket opening handshake.\n  httpHeaders: <map[string][]string>\n \n# Observes the message settings. \nmessage:\n  \n  # Observes the topic for publishing/subscribing the message.\n  topicName: <string>\n  \n  # Observes the encode way of payload content.\n  payloadEncode: <string>\n\n  # Observes the QoS of the message.\n  qos: <int>\n  \n  # Observes if retaining the message.\n  retained: <bool>\n  \n  # Observes the amount of time that the client should wait after operating.\n  waitTimeout: <string>\n\n')),Object(b.b)("h2",{id:"\u652f\u6301\u7684\u9002\u914d\u5668"},"\u652f\u6301\u7684\u9002\u914d\u5668"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./modbus"}),"modbus")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./opc-ua"}),"opcua")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./ble"}),"ble")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./dummy"}),"dummy"))))}s.isMDXComponent=!0},186:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),s=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c({},t,{},e)),a},p=function(e){var t=s(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),p=s(a),m=n,d=p["".concat(i,".").concat(m)]||p[m]||O[m]||b;return a?r.a.createElement(d,c({ref:t},o,{components:a})):r.a.createElement(d,c({ref:t},o))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,i=new Array(b);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var o=2;o<b;o++)i[o]=a[o];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);